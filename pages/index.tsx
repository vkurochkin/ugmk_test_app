import Head from 'next/head';
import { Inter } from 'next/font/google';
import {useRouter} from "next/router";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend, ResponsiveContainer
} from "recharts";

import {ChangeEvent, useEffect, useState} from "react";

import {factories, months, productTypeKey, productTypes} from "@/common/constants";
import styles from '@/styles/Home.module.css';
import {IProduct} from "@/common/interfaces/Product";
import {getMonthFromDateStr} from "@/common/utils";

const inter = Inter({ subsets: ['latin'] });

interface IFactoryProductsInMonth {
  month: string;
  factory1: number;
  factory2: number;
}

const getProductsByMonth = async (productTypeMask: Array<number>): Promise<Array<IFactoryProductsInMonth>> => {
  const res = await fetch('http://localhost:3001/products');
  const data = await res.json();
  
  const dataGroupedByMonth = [...Array(12)].map((_, i) => ({
    month: months[i],
    factory1: 0,
    factory2: 0
  }));

  data.forEach((elem: IProduct) => {
    const month = getMonthFromDateStr(elem.date);
    if (typeof month == "number") {
      const productCount = elem.product1 * productTypeMask[0]
          + elem.product2 * productTypeMask[1] + elem.product3 * productTypeMask[2];
      if (elem.factory_id == 1) {
        dataGroupedByMonth[month].factory1 += productCount;
      } else {
        dataGroupedByMonth[month].factory2 += productCount;
      }
    }
  });
  
  return dataGroupedByMonth.map(elem => ({
    factory1: Math.round(elem.factory1 / 1000),
    factory2: Math.round(elem.factory2 / 1000),
    month: elem.month,
  }));
};

export default function Home() {
  const [productsAreLoaded, setProductsAreLoaded] = useState<boolean>(false);
  const [products, setProducts] = useState<Array<IFactoryProductsInMonth>>([]);
  const [selectedProductType, setProductType] = useState<string>(productTypes[0].value);

  const router = useRouter();
  
  useEffect( () => {
    (async () => {
      const productType = localStorage.getItem(productTypeKey);
      if (productType) {
        setProductType(productType);
      }
      
      let productTypeMask: Array<number> = [1, 1, 1];
      switch (selectedProductType) {
        case productTypes[1].value:
          productTypeMask = [1, 0, 0];
          break;
        case productTypes[2].value:
          productTypeMask = [0, 1, 0];
          break;
        case productTypes[3].value:
          productTypeMask = [0, 0, 1];
          break;
        default:
          break;
      }
      
      setProducts(await getProductsByMonth(productTypeMask));
    })().then(() => setProductsAreLoaded(true));
  }, [selectedProductType]);

  const handleProductTypeChange = (e: ChangeEvent) => {
    const value = (e.target as HTMLSelectElement).value;
    setProductType(value);
    localStorage.setItem(productTypeKey, value);
  }
  
  const handleClick0 = async (data: any, month: number) => {
    await router.push(`/details/1/${month}`);
  }
  
  const handleClick1 = async (data: any, month: number) => {
    await router.push(`/details/2/${month}`);
  }
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.filter}>
          <p>
            Фильтр по типу продукции
          </p>
          <div>
            <select
              value={selectedProductType}
              onChange={e => handleProductTypeChange(e)}>
              {productTypes.map(productType=>
                  <option key={productType.id} value={productType.value}>
                    {productType.value}
                  </option>
              )}
            </select>
          </div>
        </div>

        <div className={styles.center}>
          {productsAreLoaded &&
            <ResponsiveContainer height={400} minWidth={700} width="99%" aspect={3}>
              <BarChart
                width={980}
                height={400}
                data={products}
                margin={{
                  top: 5,
                  right: 30,
                  left: 20,
                  bottom: 5
                }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="factory1" name={factories[0].name} fill={factories[0].color} cursor="pointer" onClick={handleClick0} />
                <Bar dataKey="factory2" name={factories[1].name} fill={factories[1].color} cursor="pointer" onClick={handleClick1} />
              </BarChart>
            </ResponsiveContainer>}
        </div>
      </main>
    </>
  )
}
